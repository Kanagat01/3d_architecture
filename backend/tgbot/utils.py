from asgiref.sync import sync_to_async
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from catalog.models import Application


def get_status_btn(app_id: int, is_processed: bool) -> InlineKeyboardMarkup:
    text = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ" if not is_processed else "‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text=text,
            callback_data=f"toggle_status:{app_id}"
        )
    ]])


async def get_application_text(app: Application):
    from catalog.models import ApplicationHouse, ApplicationMaf

    houses = await sync_to_async(list)(
        ApplicationHouse.objects.filter(
            application=app).select_related('house')
    )
    mafs = await sync_to_async(list)(
        ApplicationMaf.objects.filter(
            application=app).select_related('maf')
    )

    house_lines = [
        f"üè† <b>{ah.house.name}</b> ‚Äî {ah.amount} —à—Ç. –ø–æ {ah.house.price}‚ÇΩ"
        for ah in houses
    ]
    maf_lines = [
        f"üõñ <b>{am.maf.name}</b> ‚Äî {am.amount} —à—Ç. –ø–æ {am.maf.price}‚ÇΩ"
        for am in mafs
    ]

    parts = [
        f"<b>–ó–∞—è–≤–∫–∞ #{app.pk}</b>",
        f"<b>–ò–º—è:</b> {app.full_name}",
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {app.contact}",
        f"<b>–°–æ–∑–¥–∞–Ω–æ:</b> {app.created_at.strftime('%d.%m.%Y %H:%M')}",
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ' if app.is_processed else '‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ'}\n",
    ]

    houses_info = "\n".join(house_lines)
    if houses_info:
        parts.append(f"<b>–î–æ–º–∞:</b>\n{houses_info}\n")

    mafs_info = "\n".join(maf_lines)
    if mafs_info:
        prefix = "\n" if houses_info else ""
        parts.append(f"{prefix}<b>–ú–ê–§—ã:</b>\n{mafs_info}\n")

    new_text = "\n".join(parts)
    return new_text
