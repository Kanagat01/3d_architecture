from asgiref.sync import sync_to_async


async def get_application_text(app):
    from catalog.models import ApplicationHouse, ApplicationMaf

    houses = await sync_to_async(list)(
        ApplicationHouse.objects.filter(
            application=app).select_related("house")
    )
    mafs = await sync_to_async(list)(
        ApplicationMaf.objects.filter(application=app).select_related("maf")
    )

    parts = [
        f"<b>–ó–∞—è–≤–∫–∞ #{app.pk}</b>",
        f"<b>–ò–º—è:</b> {app.full_name}",
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {app.contact}",
        f"<b>–°–æ–∑–¥–∞–Ω–æ:</b> {app.created_at.strftime('%d.%m.%Y %H:%M')}",
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ' if app.is_processed else '‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ'}\n",
    ]

    if houses:
        parts.append("<b>–î–æ–º–∞:</b>")
        parts.extend(
            f"üè† <b>{h.house.name}</b> ‚Äî {h.amount} —à—Ç. –ø–æ {h.house.price}‚ÇΩ"
            for h in houses
        )

    if mafs:
        parts.append("<b>–ú–ê–§—ã:</b>")
        parts.extend(
            f"üõñ <b>{m.maf.name}</b> ‚Äî {m.amount} —à—Ç. –ø–æ {m.maf.price}‚ÇΩ"
            for m in mafs
        )

    return "\n".join(parts)
