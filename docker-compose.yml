services:
  db:
    image: postgres:16
    init: true
    networks:
      - back
    volumes:
      - database:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "5432:5432"


  django_project:
    build: ./backend
    command: >
      gunicorn backend.wsgi:application
      --bind 0.0.0.0:8000
      --workers 3
      --log-level info
      --access-logfile -
      --error-logfile -

    networks:
      - back
    volumes:
      - ./backend/:/usr/src/app/
      - static_volume:/home/app/staticfiles
      - media_volume:/home/app/mediafiles
    ports:
      - "8000:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - DJANGO_SETTINGS_MODULE=backend.settings
    env_file:
      - .env
    depends_on:
      - db
    restart: on-failure

  react_app:
    build: ./frontend
    networks:
      - front
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    depends_on:
      - django_project
    restart: on-failure

  nginx:
    build: ./nginx
    init: true
    networks:
      - front
      - back
    volumes:
      - static_volume:/home/app/staticfiles
      - media_volume:/home/app/mediafiles
      - /etc/letsencrypt/live/tgblink.ru/fullchain.pem:/certificate/fullchain.pem:ro
      - /etc/letsencrypt/live/tgblink.ru/privkey.pem:/certificate/privkey.pem:ro

    ports:
      - '80:80'
      - '443:443'
    env_file:
      - .env
    depends_on:
      - django_project
      - react_app
    restart: on-failure

volumes:
  database:
  static_volume:
  media_volume:

networks:
  front:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: "1450"
  back:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: "1450"
